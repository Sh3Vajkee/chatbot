import logging
from random import shuffle
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import ChatTypeFilter, Text

from db.models import ChatgroupUser
from middlewares.throttling import rate_limit
from keyboars import join_kb


@rate_limit("default")
async def cmd_start(message: types.Message):
    await message.answer(
        '–ß–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã:\n\n/rules'
    )


@rate_limit("default")
async def cmd_rules(message: types.Message):
    db_sesion = message.bot.get('db')

    async with db_sesion() as session:
        usr: ChatgroupUser = await session.get(ChatgroupUser, message.from_user.id)

    rules_text = '1. –ü—Ä–∞–≤–∏–ª–æ_1\n2. –ü—Ä–∞–≤–∏–ª–æ_2\n3. –ü—Ä–∞–≤–∏–ª–æ_3\n4. –ü—Ä–∞–≤–∏–ª–æ_4\n5. –ü—Ä–∞–≤–∏–ª–æ_5 –û—Ç–≤–µ—Ç: –ª–∏–º–æ–Ω\n6. –ü—Ä–∞–≤–∏–ª–æ_6'

    if not usr.checked:

        rules_text += '\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É.'
        await message.answer(rules_text, reply_markup=join_kb)

    else:
        await message.answer(rules_text)


async def test_permissions(call: types.CallbackQuery):

    check_test_btns = [
        types.InlineKeyboardButton('üçã', callback_data='test_right'),
        types.InlineKeyboardButton('üçä', callback_data='test_fail'),
        types.InlineKeyboardButton('üçè', callback_data='test_fail'),
        types.InlineKeyboardButton('üçê', callback_data='test_fail'),
        types.InlineKeyboardButton('üçë', callback_data='test_fail'),
        types.InlineKeyboardButton('üçì', callback_data='test_fail')
    ]

    shuffle(check_test_btns)
    check_text = types.InlineKeyboardMarkup(
        row_width=3).add(*check_test_btns)

    await call.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –≤—ã–±–æ—Ä –±—É–¥–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –≤—ã –±—É–¥–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—ã.',
                                 reply_markup=check_text)


async def test_btn(call: types.CallbackQuery):

    if call.data.split('_')[-1] == 'fail':

        await call.bot.unban_chat_member(-1001655542688, call.from_user.id)
        await call.message.answer('–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã!')
        await call.message.delete()

    else:

        await call.bot.restrict_chat_member(
            -1001655542688,
            call.from_user.id,
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True
        )
        await call.message.answer('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –≥—Ä—É–ø–ø—ã!')
        await call.message.delete()

        logging.info(
            f'User {call.from_user.mention} with id:{call.from_user.id} now can send messages'
        )

        db_session = call.bot.get('db')

        async with db_session() as session:
            usr: ChatgroupUser = await session.get(ChatgroupUser, call.from_user.id)
            usr.checked = True
            await session.commit()


def get_perm_handlers(dp: Dispatcher):
    dp.register_message_handler(
        cmd_start,
        ChatTypeFilter(chat_type=[types.ChatType.PRIVATE]),
        commands='start'
    )
    dp.register_message_handler(
        cmd_rules,
        ChatTypeFilter(chat_type=[types.ChatType.PRIVATE]),
        commands='rules'
    )
    dp.register_callback_query_handler(
        test_permissions,
        ChatTypeFilter(chat_type=[types.ChatType.PRIVATE]),
        text='join_ok'
    )
    dp.register_callback_query_handler(
        test_btn,
        ChatTypeFilter(chat_type=[types.ChatType.PRIVATE]),
        Text(startswith='test_')
    )
